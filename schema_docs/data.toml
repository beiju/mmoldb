display_order = 2
description = """
This is where you mostly want to look. It contains the
actual data you'll be querying.
"""

[[table]]
name = "weather"
description = """
MMOLB weathers.

This table is populated dynamically from API data in a non-determinstic
order. This means ids are *not* stable. You should not store weather
ids between queries, nor hard-code weather ids into queries. Always
join with the `weather` table.

Two weathers are considered distinct if their name, emoji, *or* tooltip
are different. There may be many entries in this table with the same
name, but their emoji and/or tooltip will be different.
"""

[[table.column]]
name = "id"
type = "bigint"
description = """
An arbitrary numeric ID. These IDs are *not* stable. You should not
store weather ids between queries, nor hard-code weather ids into
queries. Always join with the `weather` table.
"""

[[table.column]]
name = "name"
type = "text"
description = """
The weather's name, as displayed on mmolb.com.
"""

[[table.column]]
name = "emoji"
type = "text"
description = """
The weather's emoji, as displayed on mmolb.com.
"""

[[table.column]]
name = "tooltip"
type = "text"
description = """
The text that appears when you hover over a weather on mmolb.com.
"""

[[table]]
name = "games"
description = """
All* known MMOLB games. This includes incomplete games, even though we
don't process game events until the game is finished.

\\* Excluding a set of games from Season 0 which never finished and
will never finish. Those games are excluded from MMOLDB.
"""

[[table.column]]
name = "id"
type = "bigint"
description = """
An arbitrary numeric ID. These IDs are *not* stable. You should not
store these ids between queries, nor hard-code them into queries.
Always use `mmolb_game_id` for that instead.
"""

[[table.column]]
name = "ingest"
type = "bigint"
description = """
The ID of the ingest that added this game. References `info.ingests`.

Incomplete games are deleted and re-added, so a given game's `ingest`
may change over time.
"""

[[table.column]]
name = "mmolb_game_id"
type = "text"
description = """
The MMOLB game ID. This is the preferred way to identify a game.
"""

[[table.column]]
name = "weather"
type = "bigint"
description = """
The active weather during this game. This references `data.weather`.
Weather ids are *not* stable. You should not store these ids between
queries, nor hard-code them into queries. Always join to `data.weather`
and use the weather name (and emoji and tooltip if you like) instead.
"""

[[table.column]]
name = "season"
type = "integer"
description = """
The MMOLB season during which this game was played.
"""

[[table.column]]
name = "day"
type = "integer"
description = """
The MMOLB regular or postseason day during which this game was played.
"""
nullable_explanation = """
`null` for superstar games --- they have a `superstar_day` instead.

Exactly one of `day` and `superstar_day` is non-null.
"""

[[table.column]]
name = "superstar_day"
type = "integer"
description = """
The superstar day during which this game was played.
"""
nullable_explanation = """
`null` for non-superstar games --- they have a `day` instead.

Exactly one of `day` and `superstar_day` is non-null.
"""

[[table.column]]
name = "away_team_emoji"
type = "text"
description = """
The away team's emoji.
"""

[[table.column]]
name = "away_team_name"
type = "text"
description = """
The away team's name.
"""

[[table.column]]
name = "away_team_mmolb_id"
type = "text"
description = """
The away team's MMOLB ID.
"""

[[table.column]]
name = "away_team_final_score"
type = "integer"
description = """
The away team's final score.
"""
nullable_explanation = """
`null` for incomplete games.
"""

[[table.column]]
name = "home_team_emoji"
type = "text"
description = """
The home team's emoji.
"""

[[table.column]]
name = "home_team_name"
type = "text"
description = """
The home team's name.
"""

[[table.column]]
name = "home_team_mmolb_id"
type = "text"
description = """
The home team's MMOLB ID.
"""

[[table.column]]
name = "home_team_final_score"
type = "integer"
description = """
The home team's final score.
"""
nullable_explanation = """
`null` for incomplete games.
"""

[[table.column]]
name = "is_finished"
type = "boolean"
description = """
Whether this game is over.
"""

[[table]]
name = "events"
description = """
The big one. Contains a row for each pitch and certain non-pitch events
(e.g. balk).

This table does not contain a row for every item in the game event log.
Formulaic events, like game start and end messages, batter up messages,
etc. are not included. Mound visits are also not included and are
currently not available anywhere in the database. Item drops, falling
stars, or other weather events are also not included. These items may
be added in future.

`data.event_baserunners` and `data.event_fielders` are child tables of
`data.events`.
"""

[[table.column]]
name = "id"
type = "bigint"
description = """
An arbitrary numeric ID. These IDs are *not* stable. You should not
store these ids between queries, nor hard-code them into queries.
To identify a particular event use the combination of its
`mmolb_game_id` (which you access by joining `data.games` on the
`game_id` column) and `game_event_index`.
"""

[[table.column]]
name = "game_id"
type = "bigint"
description = """
The id of the game this event belongs to. References the `data.games`
table.

These IDs are *not* stable. You should not store these ids between
queries, nor hard-code them into queries. Instead use `mmolb_game_id`,
which you access by joining `data.games` on this column.
"""

[[table.column]]
name = "game_event_index"
type = "integer"
description = """
The index of this game event (starting at 0) in its game's event log.
This is used in combination with `mmolb_game_id` to identify a game
event.
"""

[[table.column]]
name = "fair_ball_event_index"
type = "integer"
description = """
Fair balls emit two consecutive messages in MMOLB. The first declares
that the ball is fair and gives its type and direction, then the second
gives its outcome. The second event's id is stored in
`game_event_index` and the first event's id is stored in
`fair_ball_event_index`.

This would be more accurately named `fair_ball_game_event_index` but
the name is already long enough as it is.
"""
nullable_explanation = """
`null` if this event is not a fair ball.
"""

[[table.column]]
name = "inning"
type = "integer"
description = """
The inning number, 1-indexed.

There are event messages that happen during "inning 0" (before the game
announces the top of the 1st), but none of them are any of the event
types that we store in this table.
"""

[[table.column]]
name = "top_of_inning"
type = "boolean"
description = """
`true` when it's the top of the inning, `false` when it's the bottom.

When it's `true`, the home team is defending and the away team is
batting. When it's false, the away team is defending and the home team
is batting.
"""

[[table.column]]
name = "event_type"
type = "bigint"
description = """
The event's type. References `taxa.event_type`.

`taxa.event_type` ids *are* stable, but you are encouraged to join
`taxa.event_type` and use its `name` column rather than directly
using event type ids in your queries or results.
"""

[[table.column]]
name = "hit_base"
type = "bigint"
description = """
If this event is a hit, the base the batter reached. Home plate (0th
base) indicates a home run. References `taxa.base`.

`taxa.base` has meaningful id numbers, so it's fine to use them
directly in your queries and results (so long as you remember that
home plate is 0th base). You can of course still join `taxa.base` if
it's convenient to do so.
"""
nullable_explanation = """
`null` if this event is not a hit.
"""

[[table.column]]
name = "fair_ball_type"
type = "bigint"
description = """
If this event is a fair ball, the batted ball type. References
`taxa.fair_ball_type`.

`taxa.fair_ball_type` ids *are* stable, but you are encouraged to join
`taxa.fair_ball_type` and use its `name` column rather than directly
using fair ball type ids in your queries or results.
"""
nullable_explanation = """
`null` if this event is not a fair ball.
"""

[[table.column]]
name = "fair_ball_direction"
type = "bigint"
description = """
If this event is a fair ball, the fielder position that ball was
heading towards. References `taxa.fielder_location`.

`taxa.fielder_location` ids *are* stable, but you are encouraged to
join `taxa.fielder_location` and use its `name` column rather than
directly using fielder location ids in your queries or results.
"""
nullable_explanation = """
`null` if this event is not a fair ball.
"""

[[table.column]]
name = "fielding_error_type"
type = "bigint"
description = """
If this event is a fielding error, the type of error (throwing or
catching). References `taxa.fielding_error_type`.

`taxa.fielding_error_type` ids *are* stable, but you are encouraged to
join `taxa.fielding_error_type` and use its `name` column rather than
directly using fielding error type ids in your queries or results.
"""
nullable_explanation = """
`null` if this event is not a fielding error.
"""

[[table.column]]
name = "pitch_type"
type = "bigint"
description = """
If this event is a pitch, the type of pitch. References
`taxa.pitch_type`.

`taxa.pitch_type` ids *are* stable, but you are encouraged to join
`taxa.pitch_type` and use its `name` column rather than directly using
pitch type ids in your queries or results.
"""
nullable_explanation = """
`null` if this event is not a pitch (e.g. a balk).
"""

[[table.column]]
name = "pitch_speed"
type = "double precision"
description = """
If this event is a pitch, the speed of the pitch.

This value is parsed from the display text, which is (as of this
writing) truncated to one decimal place.
"""
nullable_explanation = """
`null` if this event is not a pitch (e.g. a balk).
"""

[[table.column]]
name = "pitch_zone"
type = "integer"
description = """
If this event is a pitch, the region of the strike zone (or near the
strike zone) that the pitch went through.

The assignment of numbers to pitch zones comes straight from MMOLB.
The zones are arranged like so:

```
11       12
   1-2-3
   4-5-6
   7-8-9
13       14
```
"""
nullable_explanation = """
`null` if this event is not a pitch (e.g. a balk).
"""

[[table.column]]
name = "described_as_sacrifice"
type = "boolean"
description = """
Records whether MMOLB described this event as a sacrifice.

Ordinarily this would not be stored, and sacrifices would be detected
by examining the baserunners. However, early in MMOLB's history, some
plays were described as sacrifices despite not scoring nor advancing
any runners. [See the bug report on the MMOLB official discord.][bug]
This means the only way to know if an event is a *purported* sacrifice
is to store that information separately.

Although this column exists because of the bug, it is not specific to
the bugged events. This will be `true` for events which are correctly
described as sacrifices, in addition to events which are incorrectly
described as sacrifices.

This column is mainly intended to ensure game event messages can be
perfectly reconstructed from the database (aka "round-tripped"), but
it may be useful for analysis as well.

[bug]: https://discord.com/channels/1136709081319604324/1378254049325092894
"""
nullable_explanation = """
`null` if events of this type cannot be a sacrifice. As of this
writing, the only event types that can be sacrifices are caught outs
and grounded double plays.
"""

[[table.column]]
name = "is_toasty"
type = "boolean"
description = """
"toasty" is an easter egg that Danny (the creator of MMOLB) has said
exists to prevent a situation would otherwise be cause crash in the
sim. In season 2 and earlier it manifested as the text "Perfect catch!"
at the end of an event. During the s2 postseason Danny [shared his
intent][toasty] (in Discord) to change the message to "Amazing throw!"
for ground balls. That message is also how know that "toasty" is the
generic term for a perfect catch or amazing throw.

This column is mainly intended to ensure game event messages can be
perfectly reconstructed from the database (aka "round-tripped"), but
it may be useful for analysis as well.

[toasty]: https://discord.com/channels/1136709081319604324/1364685052419510404/1390859849524314212
"""
nullable_explanation = """
`null` if events of this type can never be toasty. Note that toasty is
a very rare occurrence, so there may be events that can be toasty that
we don't yet know can be toasty.
"""

[[table.column]]
name = "balls_before"
type = "integer"
description = """
Number of balls in the count before this event.

The number of balls in the count after this event can be easily
computed using the helper columns on `taxa.event_type`. For example,
if you want walks to be represented with a count of 4-X, you can use
`event.balls_before + event_type.is_ball::int`. In a query that might
look like:

```
select
    ev.balls_before + et.is_ball::int as balls_after
from data.events ev
left join taxa.event_type et on et.id = ev.event_type
```

If you want the count to be zeroed for a PA-ending event, like it is
on mmolb.com, use the slightly longer `case when
event_type.ends_plate_appearance then 0 else event.balls_before +
event_type.is_ball::int end`. In a query that might look like:

```
select
    (case when
        et.ends_plate_appearance
    then
        0
    else
        ev.balls_before + et.is_strike::int
    end) as balls_after
from data.events ev
left join taxa.event_type et on et.id = ev.event_type
```
"""

[[table.column]]
name = "strikes_before"
type = "integer"
description = """
Number of strikes in the count before this event.

The number of strikes in the count after this event can be easily
computed using the helper columns on `taxa.event_type`. For example,
if you want outs and batted balls to add to the strike total, you can
use `event.strikes_before + event_type.is_strike::int`. In a query that
might look like:

```
select
    ev.strikes_before + et.is_strike::int as strikes_after
from data.events ev
left join taxa.event_type et on et.id = ev.event_type
```

If you want strikeouts (including foul tip strikeouts) to add to the
count, but not batted balls, replace `is_strike` with
`is_basic_strike`.

If you want the count to be zeroed for a PA-ending event, like it is
on mmolb.com, use the slightly longer `case when
event_type.ends_plate_appearance then 0 else event.strikes_before +
event_type.is_strike::int end`. In a query that might look like:

```
select
    (case when
        et.ends_plate_appearance
    then
        0
    else
        ev.strikes_before + et.is_strike::int
    end) as strikes_after
from data.events ev
left join taxa.event_type et on et.id = ev.event_type
```
"""

[[table.column]]
name = "outs_before"
type = "integer"
description = """
The number of outs in the half-inning before this event.
"""

[[table.column]]
name = "outs_after"
type = "integer"
description = """
The number of outs in the half-inning after this event.

Computing `outs_after` within a query, while possible, is much more
complicated than `balls_after` or `strikes_after`. It's also
unambiguous, unlike `balls_after` or `strikes_after`.
"""

[[table.column]]
name = "away_team_score_before"
type = "integer"
description = """
The away team's score before this event.
"""

[[table.column]]
name = "away_team_score_after"
type = "integer"
description = """
The away team's score after this event.
"""

[[table.column]]
name = "home_team_score_before"
type = "integer"
description = """
The home team's score before this event.
"""

[[table.column]]
name = "home_team_score_after"
type = "integer"
description = """
The home team's score after this event.
"""

[[table.column]]
name = "pitcher_name"
type = "text"
description = """
The active pitcher's name.

The pitcher's ID is not yet available, but we're working on it.
"""

[[table.column]]
name = "pitcher_count"
type = "integer"
description = """
A number that starts at 0 at the beginning of each game and is
incremented each time there is a pitcher change.

For the purposes of this column, a pitcher change is when a different
pitching *slot* is chosen to be the active pitcher for this game. When
pitchers are swapped as a result of an augment, or when a player
Retires and is replaced in the middle of a game (due to a falling star,
for example) this number does not increase. Note that augments have
fired during games as late as Season 2 (although after season 0 it's
rare).

Each team maintains a separate `pitcher_count`. The `pitcher_count`
stored in an event is the defending team's `pitcher_count`. Use
`top_of_inning` to tell which team is defending.
"""

[[table.column]]
name = "batter_name"
type = "text"
description = """
The active batter's name.

The batter's ID is not yet available, but we're working on it.
"""

[[table.column]]
name = "batter_count"
type = "integer"
description = """
A number that starts at 0 at the start of each game and is
incremented each time a *different* batter begins a PA.

Note that this does not increase when the same batter begins a PA
multiple times in a row. As of Season 2 this only happens when the
previous PA was interrupted by an inning-ending caught stealing. To
separate multiple consecutive appearances by the same batter, use
`batter_subcount`.

This number also does not increase when a batter is swapped mid-PA as a
result of an augment, or when a player Retires and is replaced in the
middle of a PA (due to a falling star, for example). Note that augments
have fired during games as late as Season 2 (although after season 0
it's rare).

Each team maintains a separate `batter_count`. The `batter_count`
stored in an event is the batting team's `batter_count`. Use
`top_of_inning` to tell which team is batting.
"""

[[table.column]]
name = "batter_subcount"
type = "integer"
description = """
A number that is reset to 0 each time `batter_count` changes and is
incremented each time the previously-active batter begins a new PA.

As of Season 2 this only happens when the previous PA was interrupted
by an inning-ending caught stealing. As of Season 2 the only possible
values for `batter_subcount` are 0 and 1, but future game mechanics may
make higher numbers possible.

This is used in combination with `batter_count` to group plate
appearances. If you want to group all the pitches, from before and
after the caught-stealing, into a single plate appearance use
`group by batter_count`. If you want to count the interrupted plate
appearance and the subsequent plate appearances as two separate groups
of events, use `group by batter_count, batter_subcount`. If you want to
only include events from the last consecutive plate appearance
(discarding the rest), the query is more complicated.
Here's an example:

```
select
    count(1)
from data.events e
where batter_subcount = (
    select max(batter_subcount)
    from data.events e2
    where e2.game_id = e.game_id
      and e2.top_of_inning = e.top_of_inning
      and e2.batter_count = e.batter_count)
group by game_id, top_of_inning, batter_count, batter_subcount
```

Note that if you only want last event in each group of consecutive
plate appearances, it's sufficient to group by `batter_count` and then
select the row with the highest `game_event_index`, which should be
much faster.

Or, if you only want the plate-appearance-ending events, join
`taxa.event_type` and filter on `ends_plate_appearance`. As of Season 2
there should only be one event with `ends_plate_appearance = true` for
each `(game_id, top_of_inning, batter_count)` combination.
"""

[[table]]
name = "event_baserunners"
description = """
Baserunner activity for each event in `data.events`.

This contains a row for every baserunner that existed at any point
during each event. That includes runners who stayed on the same base,
runners who scored, and batters who become batter-runners but are
called out before reaching a base.

The particulars:
- A batter-runner always has a row in this table, even if they were put
  out before reaching a base. Their `base_before` will be `null`.
- Automatic runners (aka ghost runners or Manfred runners) appear in
  this table with a `base_before` of 2. There is no row with
  `base_before = null` for an automatic runner. As of Season 2, this is
  the only way for a chain of `event_baserunners` rows to begin with a
  non-null `base_before`.
- Once a runner reaches base (including the automatic runner) they will
  have a row in this table for every subsequent event until one of the
  following happens:
  1. They score, in which case the last row in the chain has
     `base_after = 0` and `is_out = false`.
  2. They are put out, in which case the last row in the chain has
     `is_out = true`. Note that runners can be put out at home.
  3. They are stranded on base when the inning ends, in which case the
     last row in the chain has `base_after <> 0` and `is_out = false`.
  Each subsequent row for a given batter will have `base_before` equal
  to their previous row's `base_after`.
- Runners who do not move during an event have a row with
  `base_before = base_after`.
"""

[[table.column]]
name = "id"
type = "bigint"
description = """
An arbitrary numeric ID. These IDs are *not* stable. You should not
store these ids between queries, nor hard-code them into queries.
To identify a particular baserunner on a particular event use the
combination of its `mmolb_game_id`, `game_event_index`, and
`base_before`. You have to join the `data.events` table to access
`game_event_index`, and from there join the `data.games` tables to
access `game_event_index`.
"""

[[table.column]]
name = "event_id"
type = "bigint"
description = """
The id of the event this baserunner belongs to. References the
`data.events` table.

These IDs are *not* stable. You should not store these ids between
queries, nor hard-code them into queries. Instead use the combination
of `mmolb_game_id` and `game_event_index` as described in the
documentation for `data.events`' `id` column.
"""

[[table.column]]
name = "baserunner_name"
type = "text"
description = """
The baserunner's name.

The baserunner's ID is not yet available, but we're working on it.
"""

[[table.column]]
name = "base_before"
type = "bigint"
description = """
The base the runner occupied before this event. References `taxa.base`.
"""
nullable_explanation = """
`null` indicates this is the batter-runner. The batter is not
considered to be at any base while they are batting.
"""

[[table.column]]
name = "base_after"
type = "bigint"
description = """
The base the runner occupied after this event, or the base they were
put out at. References `taxa.base`.

Runners who score always have a row in this table with
`base_after = 0`.

Most queries which reference this column should also reference `is_out`.
"""

[[table.column]]
name = "is_out"
type = "boolean"
description = """
Whether the runner was put out on this event. If so, `base_after` is
the base they were put out at.
"""

[[table.column]]
name = "base_description_format"
type = "bigint"
description = """
The flavor used to describe which base the player reached or was put
out at. References `taxa.base_description_format`.

MMOLB describes the same base in different ways for variety. This
column stores which way was used for a particular event, mostly for use
in reconstructing event text.
"""
nullable_explanation = """
`null` for event types which never describe a base.
"""

[[table.column]]
name = "steal"
type = "boolean"
description = """
Whether this baserunner *attempted* to steal a base during this event.
Reference `is_out` to tell whether the attempt was successful.
"""

[[table]]
name = "event_fielders"
description = """
Fielder activity for each event in `data.events`.

This contains a row for every fielder involved in the play.
"""

[[table.column]]
name = "id"
type = "bigint"
description = """
An arbitrary numeric ID. These IDs are *not* stable. You should not
store these ids between queries, nor hard-code them into queries.
To identify a particular baserunner on a particular event use the
combination of its `mmolb_game_id`, `game_event_index`, and
`play_order`. You have to join the `data.events` table to access
`game_event_index`, and from there join the `data.games` tables to
access `game_event_index`.
"""

[[table.column]]
name = "event_id"
type = "bigint"
description = """
The id of the event this fielder belongs to. References the
`data.events` table.

These IDs are *not* stable. You should not store these ids between
queries, nor hard-code them into queries. Instead use the combination
of `mmolb_game_id` and `game_event_index` as described in the
documentation for `data.events`' `id` column.
"""

[[table.column]]
name = "fielder_name"
type = "text"
description = """
The fielder's name.

The fielder's ID is not yet available, but we're working on it.
"""

[[table.column]]
name = "fielder_slot"
type = "bigint"
description = """
A best-effort attempt at recording the fielder's slot. Due to various
inconvenient behaviors of MMOLB this is not always accurate. References
`taxa.slot`.

At various times in MMOLB's short history, and for various event types,
the fielders have been identified differently. There are two main
issues:

1. Pitchers are sometimes described as "P" (for "Pitcher"), and at
   other times with their assigned slot on the team's roster. This
   means that when a position player is pitching, and fields the ball,
   they are sometimes (correctly) called "pitcher" and other times
   (incorrectly) labeled with the position they usually play.
2. Players on superstar teams play different positions than they do on
   their usual teams. Superstar games sometimes describe the player
   with their correct position for the superstar team, and other times
   (incorrectly) use the position that player has on usual team.

See the documentation of `taxa.slot` for even more details.

We want to correct these errors within MMOLDB, but it's going to take
some time to lay the groundwork that will allow us to do so. In the
meantime, take this value with a handful of salt.
"""

[[table.column]]
name = "play_order"
type = "integer"
description = """
The order of this fielder within the play. This is primarily used as a
sort key. It can also be used along with `mmolb_game_id` and
`game_event_index` to uniquely and stably identify a row in this table.
See the documentation of `id` for more.
"""
