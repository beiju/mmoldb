display_order = 2
description = """
This is where you mostly want to look. It contains the
actual data you'll be querying.
"""

[[table]]
name = "weather"
description = """
MMOLB weathers.

This table is populated dynamically from API data in a non-determinstic
order. This means ids are *not* stable. You should not store weather
ids between queries, nor hard-code weather ids into queries. Always
join with the `weather` table.

Two weathers are considered distinct if their name, emoji, *or* tooltip
are different. There may be many entries in this table with the same
name, but their emoji and/or tooltip will be different.
"""

[[table.column]]
name = "id"
type = "bigint"
description = """
An arbitrary numeric ID. These IDs are *not* stable. You should not
store weather ids between queries, nor hard-code weather ids into
queries. Always join with the `weather` table.
"""

[[table.column]]
name = "name"
type = "text"
description = """
The weather's name, as displayed on mmolb.com.
"""

[[table.column]]
name = "emoji"
type = "text"
description = """
The weather's emoji, as displayed on mmolb.com.
"""

[[table.column]]
name = "tooltip"
type = "text"
description = """
The text that appears when you hover over a weather on mmolb.com.
"""

[[table]]
name = "games"
description = """
All* known MMOLB games. This includes incomplete games, even though we
don't process game events until the game is finished.

\\* Excluding a set of games from Season 0 which never finished and
will never finish. Those games are excluded from MMOLDB.
"""

[[table.column]]
name = "id"
type = "bigint"
description = """
An arbitrary numeric ID. These IDs are *not* stable. You should not
store these ids between queries, nor hard-code them into queries.
Always use `mmolb_game_id` for that instead.
"""

[[table.column]]
name = "ingest"
type = "bigint"
description = """
The ID of the ingest that added this game. References `info.ingests`.

Incomplete games are deleted and re-added, so a given game's `ingest`
may change over time.
"""

[[table.column]]
name = "mmolb_game_id"
type = "text"
description = """
The MMOLB game ID. This is the preferred way to identify a game.
"""

[[table.column]]
name = "weather"
type = "bigint"
description = """
The active weather during this game. This references `data.weather`.
Weather ids are *not* stable. You should not store these ids between
queries, nor hard-code them into queries. Always join to `data.weather`
and use the weather name (and emoji and tooltip if you like) instead.
"""

[[table.column]]
name = "season"
type = "integer"
description = """
The MMOLB season during which this game was played.
"""

[[table.column]]
name = "day"
type = "integer"
description = """
The MMOLB regular or postseason day during which this game was played.
"""
nullable_explanation = """
`null` for superstar games --- they have a `superstar_day` instead.

Exactly one of `day` and `superstar_day` is non-null.
"""

[[table.column]]
name = "superstar_day"
type = "integer"
description = """
The superstar day during which this game was played.
"""
nullable_explanation = """
`null` for non-superstar games --- they have a `day` instead.

Exactly one of `day` and `superstar_day` is non-null.
"""

[[table.column]]
name = "away_team_emoji"
type = "text"
description = """
The away team's emoji.
"""

[[table.column]]
name = "away_team_name"
type = "text"
description = """
The away team's name.
"""

[[table.column]]
name = "away_team_mmolb_id"
type = "text"
description = """
The away team's MMOLB ID.
"""

[[table.column]]
name = "away_team_final_score"
type = "integer"
description = """
The away team's final score.
"""
nullable_explanation = """
`null` for incomplete games.
"""

[[table.column]]
name = "home_team_emoji"
type = "text"
description = """
The home team's emoji.
"""

[[table.column]]
name = "home_team_name"
type = "text"
description = """
The home team's name.
"""

[[table.column]]
name = "home_team_mmolb_id"
type = "text"
description = """
The home team's MMOLB ID.
"""

[[table.column]]
name = "home_team_final_score"
type = "integer"
description = """
The home team's final score.
"""
nullable_explanation = """
`null` for incomplete games.
"""

[[table.column]]
name = "is_ongoing"
type = "boolean"
description = """
Whether this game is currently being played. This is slightly different
from "not finished" because there are some bugged games from season 0
which will never finish, but they are not "ongoing".
"""

[[table.column]]
name = "stadium_name"
type = "text"
description = """
The name of the stadium this game was played in, if any.
"""
nullable_explanation = """
`null` for games from before stadiums were introduced in season 3.
"""

[[table.column]]
name = "from_version"
type = "timestamp without time zone"
description = """
Identifies which version of the game object was used to generate this game and
its events in mmoldb. This is primarily used by MMOLDB itself to update games
when their data changes. It matches the `valid_from` field of the entity in
chron and in `data.entities`.

There is *almost* always a matching game in `data.entities`, but not quite.
When a game is updated, the old raw game is deleted from `data.entities` before
the new game is processed and added to `data.games`. This mostly happens with
ongoing games, but it can also happen with finished games.
"""

[[table.column]]
name = "away_team_earned_coins"
type = "integer"
description = """
The number of coins the away team earned. This includes coins earned from
Prosperity weather, from Geomagnetic Storms weather, and from any other future
coin-earning sources.
"""
nullable_explanation = """
`null` in the following situations:
1. This is not a coin-awarding weather.
2. This is a coin-awarding weather, but there was no message about teams
   earning coins. This can happen in e.g. Geomagnetic Storms weather if no
   storm events occurred. It is not possible in Prosperity weather, even though
   it was at once time possible for neither team to earn any coins. In that
   event there is still a message, but neither team earns any coins (MMOLDB
   records this as both teams earning 0 coins.)
3. This is a coin-awarding weather that MMOLDB does not yet support. If this
   ever occurs, we are presumably working on it.
4. This is a coin-awarding weather, and we do support it, and there was a
   message about the teams earning coins, but we don't know which is the home
   team and which is the away team because the teams have identical names and
   emoji.
"""

[[table.column]]
name = "home_team_earned_coins"
type = "integer"
description = """
The number of coins the home team earned. This includes coins earned from
Prosperity weather, from Geomagnetic Storms weather, and from any other future
coin-earning sources.
"""
nullable_explanation = """
See `away_team_earned_coins` for an explanation of what `null` indicates.
"""

[[table.column]]
name = "away_team_photo_contest_top_scorer"
type = "text"
description = """
The name of the away team's top scorer in this game's photo contest.
"""
nullable_explanation = """
`null` in the following situations:
1. This is not Geomagnetic Storms weather.
2. There were no aurorae during this game, so there was no photo contest.
3. We can't tell which player belongs to the home team because the home and
   away teams have the exact same name and emoji.
"""

[[table.column]]
name = "away_team_photo_contest_score"
type = "integer"
description = """
The score that the away team's top scoring photo earned in this game's photo
contest.
"""
nullable_explanation = """
See `away_team_photo_contest_top_scorer` for an explanation of what `null`
indicates.
"""

[[table.column]]
name = "home_team_photo_contest_top_scorer"
type = "text"
description = """
The name of the home team's top scorer in this game's photo contest.
"""
nullable_explanation = """
See `away_team_photo_contest_top_scorer` for an explanation of what `null`
indicates.
"""

[[table.column]]
name = "home_team_photo_contest_score"
type = "integer"
description = """
The score that the home team's top scoring photo earned in this game's photo
contest.
"""
nullable_explanation = """
See `away_team_photo_contest_top_scorer` for an explanation of what `null`
indicates.
"""

[[table]]
name = "events"
description = """
The big one. Contains a row for each pitch and certain non-pitch events
(e.g. balk).

This table does not contain a row for every item in the game event log.
Formulaic events, like game start and end messages, batter up messages,
etc. are not included. Mound visits are also not included and are
currently not available anywhere in the database. Item drops, falling
stars, or other weather events are also not included. These items may
be added in future.

`data.event_baserunners` and `data.event_fielders` are child tables of
`data.events`.
"""

[[table.column]]
name = "id"
type = "bigint"
description = """
An arbitrary numeric ID. These IDs are *not* stable. You should not
store these ids between queries, nor hard-code them into queries.
To identify a particular event use the combination of its
`mmolb_game_id` (which you access by joining `data.games` on the
`game_id` column) and `game_event_index`.
"""

[[table.column]]
name = "game_id"
type = "bigint"
description = """
The id of the game this event belongs to. References the `data.games`
table.

These IDs are *not* stable. You should not store these ids between
queries, nor hard-code them into queries. Instead use `mmolb_game_id`,
which you access by joining `data.games` on this column.
"""

[[table.column]]
name = "game_event_index"
type = "integer"
description = """
The index of this game event (starting at 0) in its game's event log.
This is used in combination with `mmolb_game_id` to identify a game
event.
"""

[[table.column]]
name = "fair_ball_event_index"
type = "integer"
description = """
Fair balls emit two consecutive messages in MMOLB. The first declares
that the ball is fair and gives its type and direction, then the second
gives its outcome. The second event's id is stored in
`game_event_index` and the first event's id is stored in
`fair_ball_event_index`.

This would be more accurately named `fair_ball_game_event_index` but
the name is already long enough as it is.
"""
nullable_explanation = """
`null` if this event is not a fair ball.
"""

[[table.column]]
name = "inning"
type = "integer"
description = """
The inning number, 1-indexed.

There are event messages that happen during "inning 0" (before the game
announces the top of the 1st), but none of them are any of the event
types that we store in this table.
"""

[[table.column]]
name = "top_of_inning"
type = "boolean"
description = """
`true` when it's the top of the inning, `false` when it's the bottom.

When it's `true`, the home team is defending and the away team is
batting. When it's false, the away team is defending and the home team
is batting.
"""

[[table.column]]
name = "event_type"
type = "bigint"
description = """
The event's type. References `taxa.event_type`.

`taxa.event_type` ids *are* stable, but you are encouraged to join
`taxa.event_type` and use its `name` column rather than directly
using event type ids in your queries or results.
"""

[[table.column]]
name = "hit_base"
type = "bigint"
description = """
If this event is a hit, the base the batter reached. Home plate (0th
base) indicates a home run. References `taxa.base`.

`taxa.base` has meaningful id numbers, so it's fine to use them
directly in your queries and results (so long as you remember that
home plate is 0th base). You can of course still join `taxa.base` if
it's convenient to do so.
"""
nullable_explanation = """
`null` if this event is not a hit.
"""

[[table.column]]
name = "fair_ball_type"
type = "bigint"
description = """
If this event is a fair ball, the batted ball type. References
`taxa.fair_ball_type`.

`taxa.fair_ball_type` ids *are* stable, but you are encouraged to join
`taxa.fair_ball_type` and use its `name` column rather than directly
using fair ball type ids in your queries or results.
"""
nullable_explanation = """
`null` if this event is not a fair ball.
"""

[[table.column]]
name = "fair_ball_direction"
type = "bigint"
description = """
If this event is a fair ball, the fielder position that ball was
heading towards. References `taxa.fielder_location`.

`taxa.fielder_location` ids *are* stable, but you are encouraged to
join `taxa.fielder_location` and use its `name` column rather than
directly using fielder location ids in your queries or results.
"""
nullable_explanation = """
`null` if this event is not a fair ball.
"""

[[table.column]]
name = "fielding_error_type"
type = "bigint"
description = """
If this event is a fielding error, the type of error (throwing or
catching). References `taxa.fielding_error_type`.

`taxa.fielding_error_type` ids *are* stable, but you are encouraged to
join `taxa.fielding_error_type` and use its `name` column rather than
directly using fielding error type ids in your queries or results.
"""
nullable_explanation = """
`null` if this event is not a fielding error.
"""

[[table.column]]
name = "pitch_type"
type = "bigint"
description = """
If this event is a pitch, the type of pitch. References
`taxa.pitch_type`.

`taxa.pitch_type` ids *are* stable, but you are encouraged to join
`taxa.pitch_type` and use its `name` column rather than directly using
pitch type ids in your queries or results.
"""
nullable_explanation = """
`null` if this event is not a pitch (e.g. a balk).
"""

[[table.column]]
name = "pitch_speed"
type = "double precision"
description = """
If this event is a pitch, the speed of the pitch.

This value is parsed from the display text, which is (as of this
writing) truncated to one decimal place.
"""
nullable_explanation = """
`null` if this event is not a pitch (e.g. a balk).
"""

[[table.column]]
name = "pitch_zone"
type = "integer"
description = """
If this event is a pitch, the region of the strike zone (or near the
strike zone) that the pitch went through.

The assignment of numbers to pitch zones comes straight from MMOLB.
The zones are arranged like so:

```
11       12
   1-2-3
   4-5-6
   7-8-9
13       14
```
"""
nullable_explanation = """
`null` if this event is not a pitch (e.g. a balk).
"""

[[table.column]]
name = "described_as_sacrifice"
type = "boolean"
description = """
Records whether MMOLB described this event as a sacrifice.

Ordinarily this would not be stored, and sacrifices would be detected
by examining the baserunners. However, early in MMOLB's history, some
plays were described as sacrifices despite not scoring nor advancing
any runners. [See the bug report on the MMOLB official discord.][bug]
This means the only way to know if an event is a *purported* sacrifice
is to store that information separately.

Although this column exists because of the bug, it is not specific to
the bugged events. This will be `true` for events which are correctly
described as sacrifices, in addition to events which are incorrectly
described as sacrifices.

This column is mainly intended to ensure game event messages can be
perfectly reconstructed from the database (aka "round-tripped"), but
it may be useful for analysis as well.

[bug]: https://discord.com/channels/1136709081319604324/1378254049325092894
"""
nullable_explanation = """
`null` if events of this type cannot be a sacrifice. As of this
writing, the only event types that can be sacrifices are caught outs
and grounded double plays.
"""

[[table.column]]
name = "is_toasty"
type = "boolean"
description = """
"toasty" is an easter egg that Danny (the creator of MMOLB) has said
exists to prevent a situation would otherwise be cause crash in the
sim. In season 2 and earlier it manifested as the text "Perfect catch!"
at the end of an event. During the s2 postseason Danny [shared his
intent][toasty] (in Discord) to change the message to "Amazing throw!"
for ground balls. That message is also how know that "toasty" is the
generic term for a perfect catch or amazing throw.

This column is mainly intended to ensure game event messages can be
perfectly reconstructed from the database (aka "round-tripped"), but
it may be useful for analysis as well.

[toasty]: https://discord.com/channels/1136709081319604324/1364685052419510404/1390859849524314212
"""
nullable_explanation = """
`null` if events of this type can never be toasty. Note that toasty is
a very rare occurrence, so there may be events that can be toasty that
we don't yet know can be toasty.
"""

[[table.column]]
name = "balls_before"
type = "integer"
description = """
Number of balls in the count before this event.

The number of balls in the count after this event can be easily
computed using the helper columns on `taxa.event_type`. For example,
if you want walks to be represented with a count of 4-X, you can
use the provided `balls_after` function, which takes the event and
event type as arguments. In a query that might look like:

```
select
    data.balls_after(ev, et)
from data.events ev
left join taxa.event_type et on et.id = ev.event_type
```

If you want the count to be zeroed for a PA-ending event, like it is
on mmolb.com, use the slightly longer `case when
event_type.ends_plate_appearance then 0 else data.balls_after(ev, et)
end`. In a query that might look like:

```
select
    (case when
        et.ends_plate_appearance
    then
        0
    else
        data.balls_after(ev, et)
    end)
from data.events ev
left join taxa.event_type et on et.id = ev.event_type
```
"""

[[table.column]]
name = "strikes_before"
type = "integer"
description = """
Number of strikes in the count before this event.

The number of strikes in the count after this event can be easily
computed using the helper columns on `taxa.event_type`. For example,
if you want outs and batted balls to add to the strike total, you can
use the provided `strikes_after` function, which takes the event and
event type as arguments. In a query that might look like:

```
select
    data.strikes_after(ev, et)
from data.events ev
left join taxa.event_type et on et.id = ev.event_type
```

If you want strikeouts (including foul tip strikeouts) to add to the
count, but not batted balls, replace `is_strike` with
`is_basic_strike`.

If you want the count to be zeroed for a PA-ending event, like it is
on mmolb.com, use the slightly longer `case when
event_type.ends_plate_appearance then 0 else data.strikes_after(event,
event_type) end`. In a query that might look like:

```
select
    (case when
        et.ends_plate_appearance
    then
        0
    else
        data.strikes_after(ev, et)
    end)
from data.events ev
left join taxa.event_type et on et.id = ev.event_type
```
"""

[[table.column]]
name = "outs_before"
type = "integer"
description = """
The number of outs in the half-inning before this event.
"""

[[table.column]]
name = "outs_after"
type = "integer"
description = """
The number of outs in the half-inning after this event.

Computing `outs_after` within a query, while possible, is much more
complicated than `balls_after` or `strikes_after`. It's also
unambiguous, unlike `balls_after` or `strikes_after`.
"""

[[table.column]]
name = "errors_before"
type = "integer"
description = """
The number of errors in the half-inning before this event. This is
primarily useful for calculating earned runs.
"""

[[table.column]]
name = "errors_after"
type = "integer"
description = """
The number of errors in the half-inning after this event. This is
primarily useful for calculating earned runs.
"""

[[table.column]]
name = "away_team_score_before"
type = "integer"
description = """
The away team's score before this event.
"""

[[table.column]]
name = "away_team_score_after"
type = "integer"
description = """
The away team's score after this event.
"""

[[table.column]]
name = "home_team_score_before"
type = "integer"
description = """
The home team's score before this event.
"""

[[table.column]]
name = "home_team_score_after"
type = "integer"
description = """
The home team's score after this event.
"""

[[table.column]]
name = "pitcher_name"
type = "text"
description = """
The active pitcher's name.

The pitcher's ID is not yet available, but we're working on it.
"""

[[table.column]]
name = "pitcher_count"
type = "integer"
description = """
A number that starts at 0 at the beginning of each game and is
incremented each time there is a pitcher change.

For the purposes of this column, a pitcher change is when a different
pitching *slot* is chosen to be the active pitcher for this game. When
pitchers are swapped as a result of an augment, or when a player
Retires and is replaced in the middle of a game (due to a falling star,
for example) this number does not increase. Note that augments have
fired during games as late as Season 2 (although after season 0 it's
rare).

Each team maintains a separate `pitcher_count`. The `pitcher_count`
stored in an event is the defending team's `pitcher_count`. Use
`top_of_inning` to tell which team is defending.
"""

[[table.column]]
name = "batter_name"
type = "text"
description = """
The active batter's name.

The batter's ID is not yet available, but we're working on it.
"""

[[table.column]]
name = "batter_count"
type = "integer"
description = """
A number that starts at 0 at the start of each game and is
incremented each time a *different* batter begins a PA.

Note that this does not increase when the same batter begins a PA
multiple times in a row. As of Season 2 this only happens when the
previous PA was interrupted by an inning-ending caught stealing. To
separate multiple consecutive appearances by the same batter, use
`batter_subcount`.

This number also does not increase when a batter is swapped mid-PA as a
result of an augment, or when a player Retires and is replaced in the
middle of a PA (due to a falling star, for example). Note that augments
have fired during games as late as Season 2 (although after season 0
it's rare).

Each team maintains a separate `batter_count`. The `batter_count`
stored in an event is the batting team's `batter_count`. Use
`top_of_inning` to tell which team is batting.
"""

[[table.column]]
name = "batter_subcount"
type = "integer"
description = """
A number that is reset to 0 each time `batter_count` changes and is
incremented each time the previously-active batter begins a new PA.

As of Season 2 this only happens when the previous PA was interrupted
by an inning-ending caught stealing. As of Season 2 the only possible
values for `batter_subcount` are 0 and 1, but future game mechanics may
make higher numbers possible.

This is used in combination with `batter_count` to group plate
appearances. If you want to group all the pitches, from before and
after the caught-stealing, into a single plate appearance use
`group by batter_count`. If you want to count the interrupted plate
appearance and the subsequent plate appearances as two separate groups
of events, use `group by batter_count, batter_subcount`. If you want to
only include events from the last consecutive plate appearance
(discarding the rest), the query is more complicated.
Here's an example:

```
select
    count(1)
from data.events e
where batter_subcount = (
    select max(batter_subcount)
    from data.events e2
    where e2.game_id = e.game_id
      and e2.top_of_inning = e.top_of_inning
      and e2.batter_count = e.batter_count)
group by
    game_id,
    top_of_inning,
    batter_count,
    batter_subcount
```

Note that if you only want the last event in each group of consecutive
plate appearances, it's sufficient to group by `batter_count` and then
select the row with the highest `game_event_index`, which should be
much faster.

Or, if you only want the plate-appearance-ending events, join
`taxa.event_type` and filter on `ends_plate_appearance`. As of Season 2
there should only be one event with `ends_plate_appearance = true` for
each `(game_id, top_of_inning, batter_count)` combination.
"""

[[table.column]]
name = "cheer"
type = "text"
description = """
The crowd's cheer on this event, if any.

Note: Cheers on fair balls are from the event referenced by
fair_ball_event_index. Cheers on other event types are from the event
referenced by game_event_index.

WARNING: This column may be turned into a foreign key reference soon, similar
to weather. Treat it as unstable.
"""
nullable_explanation = """
`null` for events where the crowd did not cheer.
"""

[[table]]
name = "event_baserunners"
description = """
Baserunner activity for each event in `data.events`.

This contains a row for every baserunner that existed at any point
during each event. That includes runners who stayed on the same base,
runners who scored, and batters who become batter-runners but are
called out before reaching a base.

The particulars:
- A batter-runner always has a row in this table, even if they were put
  out before reaching a base. Their `base_before` will be `null`.
- Automatic runners (aka ghost runners or Manfred runners) appear in
  this table with a `base_before` of 2. There is no row with
  `base_before = null` for an automatic runner. As of Season 2, this is
  the only way for a chain of `event_baserunners` rows to begin with a
  non-null `base_before`.
- Once a runner reaches base (including the automatic runner) they will
  have a row in this table for every subsequent event until one of the
  following happens:
  1. They score, in which case the last row in the chain has
     `base_after = 0` and `is_out = false`.
  2. They are put out, in which case the last row in the chain has
     `is_out = true`. Note that runners can be put out at home.
  3. They are stranded on base when the inning ends, in which case the
     last row in the chain has `base_after <> 0` and `is_out = false`.
  Each subsequent row for a given batter will have `base_before` equal
  to their previous row's `base_after`.
- Runners who do not move during an event have a row with
  `base_before = base_after`.
"""

[[table.column]]
name = "id"
type = "bigint"
description = """
An arbitrary numeric ID. These IDs are *not* stable. You should not
store these ids between queries, nor hard-code them into queries.
To identify a particular baserunner on a particular event use the
combination of its `mmolb_game_id`, `game_event_index`, and
`base_before`. You have to join the `data.events` table to access
`game_event_index`, and from there join the `data.games` tables to
access `mmolb_game_id`.
"""

[[table.column]]
name = "event_id"
type = "bigint"
description = """
The id of the event this baserunner belongs to. References the
`data.events` table.

These IDs are *not* stable. You should not store these ids between
queries, nor hard-code them into queries. Instead use the combination
of `mmolb_game_id` and `game_event_index` as described in the
documentation for `data.events`' `id` column.
"""

[[table.column]]
name = "baserunner_name"
type = "text"
description = """
The baserunner's name.

The baserunner's ID is not yet available, but we're working on it.
"""

[[table.column]]
name = "base_before"
type = "bigint"
description = """
The base the runner occupied before this event. References `taxa.base`.
"""
nullable_explanation = """
`null` indicates this is the batter-runner. The batter is not
considered to be at any base while they are batting.
"""

[[table.column]]
name = "base_after"
type = "bigint"
description = """
The base the runner occupied after this event, or the base they were
put out at. References `taxa.base`.

Runners who score always have a row in this table with
`base_after = 0`.

Most queries which reference this column should also reference `is_out`.
"""

[[table.column]]
name = "is_out"
type = "boolean"
description = """
Whether the runner was put out on this event. If so, `base_after` is
the base they were put out at.
"""

[[table.column]]
name = "base_description_format"
type = "bigint"
description = """
The flavor used to describe which base the player reached or was put
out at. References `taxa.base_description_format`.

MMOLB describes the same base in different ways for variety. This
column stores which way was used for a particular event, mostly for use
in reconstructing event text.
"""
nullable_explanation = """
`null` for event types which never describe a base.
"""

[[table.column]]
name = "steal"
type = "boolean"
description = """
Whether this baserunner *attempted* to steal a base during this event.
Reference `is_out` to tell whether the attempt was successful.
"""

[[table.column]]
name = "source_event_index"
type = "integer"
description = """
The index of the event that put this baserunner on base. Primarily
useful for calculating earned runs.
"""
nullable_explanation = """
`null` if this baserunner did not reach base as a result of a pitch.
For example, automatic runners in extra innings don't have a
source_event_index.
"""

[[table.column]]
name = "is_earned"
type = "boolean"
description = """
True if this runner scoring would count as an earned run for the
pitcher referenced by source_event_index. If false, this runner's score
will never count as an earned run.
"""

[[table]]
name = "event_fielders"
description = """
Fielder activity for each event in `data.events`.

This contains a row for every fielder involved in the play.
"""

[[table.column]]
name = "id"
type = "bigint"
description = """
An arbitrary numeric ID. These IDs are *not* stable. You should not
store these ids between queries, nor hard-code them into queries.
To identify a particular baserunner on a particular event use the
combination of its `mmolb_game_id`, `game_event_index`, and
`play_order`. You have to join the `data.events` table to access
`game_event_index`, and from there join the `data.games` tables to
access `mmolb_game_id`.
"""

[[table.column]]
name = "event_id"
type = "bigint"
description = """
The id of the event this fielder belongs to. References the
`data.events` table.

These IDs are *not* stable. You should not store these ids between
queries, nor hard-code them into queries. Instead use the combination
of `mmolb_game_id` and `game_event_index` as described in the
documentation for `data.events`' `id` column.
"""

[[table.column]]
name = "fielder_name"
type = "text"
description = """
The fielder's name.

The fielder's ID is not yet available, but we're working on it.
"""

[[table.column]]
name = "fielder_slot"
type = "bigint"
description = """
A best-effort attempt at recording the fielder's slot. Due to various
inconvenient behaviors of MMOLB this is not always accurate. References
`taxa.slot`.

At various times in MMOLB's short history, and for various event types,
the fielders have been identified differently. There are two main
issues:

1. Pitchers are sometimes described as "P" (for "Pitcher"), and at
   other times with their assigned slot on the team's roster. This
   means that when a position player is pitching, and fields the ball,
   they are sometimes (correctly) called "pitcher" and other times
   (incorrectly) labeled with the position they usually play.
2. Players on superstar teams play different positions than they do on
   their usual teams. Superstar games sometimes describe the player
   with their correct position for the superstar team, and other times
   (incorrectly) use the position that player has on usual team.

See the documentation of `taxa.slot` for even more details.

We want to correct these errors within MMOLDB, but it's going to take
some time to lay the groundwork that will allow us to do so. In the
meantime, take this value with a handful of salt.
"""

[[table.column]]
name = "play_order"
type = "integer"
description = """
The order of this fielder within the play. This is primarily used as a
sort key. It can also be used along with `mmolb_game_id` and
`game_event_index` to uniquely and stably identify a row in this table.
See the documentation of `id` for more.
"""

[[table]]
name = "entities"
description = """
A mirror of Chron's `entities` endpoint for selected `kind`s. Currently only
holds `kind == "game"`.

NOTE: Unlike Chron, a given entity `kind` is either in this table or
`data.versions`, not both. `kind`s for which MMOLDB uses historical data are
stored in `data.versions`, and those for which MMOLDB doesn't use historical
data are stored in `data.entities`. Not all Chron `kind`s are ingested.
"""

[[table.column]]
name = "kind"
type = "text"
description = """
The kind of the entity, e.g. `"game"`, `"team"`, `"player"`, etc. Matches
Chron's kind.

The type of this field may be changed in the future.
"""

[[table.column]]
name = "entity_id"
type = "text"
description = """
The entity's MMOLB id.
"""

[[table.column]]
name = "valid_from"
type = "timestamp without time zone"
description = """
The earliest date that Chron observed this version of the entity. This may not
(and typically will not) line up perfectly with when this version was created
because Chron can only poll so often.

Note `entities` doesn't have a `valid_to` column because it only stores the
latest version of each entity, for which `valid_to` is always `null`.
"""

[[table.column]]
name = "data"
type = "jsonb"
description = """
The actual data of the entity. This is the data exactly as returned by the
MMOLB API with no modification, so structure is subject to change whenever the
API changes.
"""

[[table]]
name = "versions"
description = """
A mirror of Chron's `entities` endpoint for selected `kind`s. Currently holds
every `kind` that MMOLDB uses except for `"game"`.

NOTE: Unlike Chron, a given entity `kind` is either in this table or
`data.entities`, not both. `kind`s for which MMOLDB uses historical data are
stored in `data.versions`, and those for which MMOLDB doesn't use historical
data are stored in `data.entities`. Not all Chron `kind`s are ingested.
"""

[[table.column]]
name = "kind"
type = "text"
description = """
The kind of the entity, e.g. `"game"`, `"team"`, `"player"`, etc. Matches
Chron's kind.

The type of this field may be changed in the future.
"""

[[table.column]]
name = "entity_id"
type = "text"
description = """
The entity's MMOLB id.
"""

[[table.column]]
name = "valid_from"
type = "timestamp without time zone"
description = """
The earliest date that Chron observed this version of the entity. This may not
(and typically will not) line up perfectly with when this version was created
because Chron can only poll so often.
"""

[[table.column]]
name = "valid_to"
type = "timestamp without time zone"
description = """
The earliest date after `valid_from` that Chron observed a different version
of this entity -- that is, the first date where we're sure this entity was no
longer valid. This may not (and typically will not) line up perfectly with when
this version was actually invalidated because Chron can only poll so often.
"""
nullable_explanation = """
`null` if this version is still valid.
"""

[[table.column]]
name = "data"
type = "jsonb"
description = """
The actual data of the entity. This is the data exactly as returned by the
MMOLB API with no modification, so structure is subject to change whenever the
API changes.
"""

[[table]]
name = "aurora_photos"
description = """
A record of players snapping photos of the aurora during Geomagnetic Storms
weather. Every event with aurora photos has two, one from each team, and they
are stored as separate rows in this table. `is_listed_first` identifies which
one is listed first.
"""

[[table.column]]
name = "id"
type = "bigint"
description = """
An arbitrary numeric ID. These IDs are *not* stable. You should not store these
ids between queries, nor hard-code them into queries. To identify a particular
aurora photo use the combination of its `mmolb_game_id`, `game_event_index`,
and `is_listed_first`. You have to join the `data.events` table to access
`game_event_index`, and from there join the `data.games` tables to access
`mmolb_game_id`.
"""

[[table.column]]
name = "event_id"
type = "bigint"
description = """
The id of the event this aurora photo belongs to. References the `data.events`
table.

These IDs are *not* stable. You should not store these ids between
queries, nor hard-code them into queries. Instead use the combination
of `mmolb_game_id` and `game_event_index` as described in the
documentation for `data.events`' `id` column.
"""

[[table.column]]
name = "is_listed_first"
type = "boolean"
description = """
`true` if this photo was the first one listed in its event, `false` if it was
the second.

There's always one photo from each team, but there's not enough information in
the event itself to know which team, so MMOLDB doesn't attempt to record that.
"""

[[table.column]]
name = "team_emoji"
type = "text"
description = """
The team emoji of the player who took this picture.
"""

[[table.column]]
name = "player_slot"
type = "bigint"
description = """
The roster slot of the player who took this picture. References `taxa.slot`.
"""

[[table.column]]
name = "player_name"
type = "text"
description = """
The name of the player who took this picture.
"""

[[table]]
name = "ejections"
description = """
Instances of players being ejected by ROBO-UMP.
"""

[[table.column]]
name = "id"
type = "bigint"
description = """
An arbitrary numeric ID. These IDs are *not* stable. You should not store these
ids between queries, nor hard-code them into queries. To identify a particular
ejection use the combination of its `mmolb_game_id` and `game_event_index`.
You have to join the `data.events` table to access `game_event_index`, and from
there join the `data.games` tables to access `mmolb_game_id`.
"""

[[table.column]]
name = "event_id"
type = "bigint"
description = """
The id of the event this ejection happend on. References the `data.events`
table.

These IDs are *not* stable. You should not store these ids between queries, nor
hard-code them into queries. Instead use the combination of `mmolb_game_id` and
`game_event_index` as described in the documentation for `data.events`' `id`
column.
"""

[[table.column]]
name = "team_emoji"
type = "text"
description = """
The team emoji of the player who was ejected.
"""

[[table.column]]
name = "team_name"
type = "text"
description = """
The team name of the player who was ejected.
"""

[[table.column]]
name = "ejected_player_name"
type = "text"
description = """
The name of the player who was ejected.
"""

[[table.column]]
name = "ejected_player_slot"
type = "bigint"
description = """
The roster slot of the player who was ejected. References `taxa.slot`.
"""

[[table.column]]
name = "violation_type"
type = "text"
description = """
The type of violation, e.g. "Communication" or "Sportsmanship".
"""

[[table.column]]
name = "reason"
type = "text"
description = """
The reason for the ejection.
"""

[[table.column]]
name = "replacement_player_name"
type = "text"
description = """
The name of the player is taking the place of the ejected player.
"""

[[table.column]]
name = "replacement_player_slot"
type = "bigint"
description = """
The roster slot of the player who is taking the place of the ejected player,
if one is given. References `taxa.slot`.
"""
nullable_explanation = """
`null` if the replacement is a bench player.
"""

[[table]]
name = "door_prizes"
description = """
Door prizes earned, and not earned, during Party weather.

There's a row in this table every time the player *could* win a door prize,
regardless whether they did win one.

Tokens won as a door prize are included directly on this table. Items won as a
door prize are stored on `data.door_prize_items`.
"""

[[table.column]]
name = "id"
type = "bigint"
description = """
An arbitrary numeric ID. These IDs are *not* stable. You should not store
door prize ids between queries, nor hard-code door prize ids into queries.
"""

[[table.column]]
name = "event_id"
type = "bigint"
description = """
The id of the event this door prize happend on. References the `data.events`
table.

Event IDs are *not* stable. You should not store event ids between queries, nor
hard-code them into queries. Instead use the combination of `mmolb_game_id` and
`game_event_index` as described in the documentation for `data.events`' `id`
column.
"""

[[table.column]]
name = "door_prize_index"
type = "integer"
description = """
Index of this door prize within the event. There can be two door prizes in the
event that the batter and pitcher are both new to the game.
"""

[[table.column]]
name = "player_name"
type = "text"
description = """
Name of the player who recieved this door prize.
"""

[[table.column]]
name = "tokens"
type = "integer"
description = """
The number of tokens the player won as a door prize, if any.
"""
nullable_explanation = """
`null` if the player won items as their door prize, or if the player didn't win
any door prize.

You need to also reference `data.door_prize_items`
"""

[[table]]
name = "door_prize_items"
description = """
Items earned as a door prize.

This table is meant to be used in conjunction with `data.door_prizes`.
"""

[[table.column]]
name = "id"
type = "bigint"
description = """
An arbitrary numeric ID. These IDs are *not* stable. You should not store
door prize item ids between queries, nor hard-code door prize item ids into
queries.
"""

[[table.column]]
name = "event_id"
type = "bigint"
description = """
The id of the event this door prize item was awarded on. References the
`data.events` table.

Event IDs are *not* stable. You should not store event ids between queries, nor
hard-code them into queries. Instead use the combination of `mmolb_game_id` and
`game_event_index` as described in the documentation for `data.events`' `id`
column.
"""

[[table.column]]
name = "door_prize_index"
type = "integer"
description = """
Index of this door prize within the event. There can be two door prizes in the
event that the batter and pitcher are both new to the game.
"""

[[table.column]]
name = "item_index"
type = "integer"
description = """
Index of this item within the list of items the player won. There can be at
least 12 (yes, twelve) items awarded as a single prize.
"""

[[table.column]]
name = "emoji"
type = "text"
description = """
The item's emoji.
"""

[[table.column]]
name = "name"
type = "text"
description = """
The item's name.

See documentation for `name` on `data.player_equipment_versions` for more about
how item names work.
"""

[[table.column]]
name = "rare_name"
type = "text"
description = """
The item's rare name.

See documentation for `rare_name` on `data.player_equipment_versions` for more
about how rare names work.
"""
nullable_explanation = """
`null` if this item is not Rare or higher.
"""

[[table.column]]
name = "prefix"
type = "text"
description = """
The item's prefix. Note that unlike general items, door prize items may have
at most one prefix.

See documentation for `prefixes` on `data.player_equipment_versions` for more
about how prefixes work.
"""
nullable_explanation = """
`null` if this item does not have a prefix.
"""

[[table.column]]
name = "suffix"
type = "text"
description = """
The item's suffix. Note that unlike general items, door prize items may have
at most one suffix.

See documentation for `suffixes` on `data.player_equipment_versions` for more
about how suffixes work.
"""
nullable_explanation = """
`null` if this item does not have a suffix.
"""

[[table]]
name = "modifications"
description = """
The possible player modifications, including Greater and Lesser boons (which
are special categories of modifications).

MMOLB doesn't provide a machine-readable description of modifications' effects,
and no work has yet been done on parsing them from the description. If you want
that, please let us know in the Discord or Github so we know to prioritize it.
Or, better yet, contribute it yourself!

This table is populated dynamically from API data in a non-determinstic
order. This means ids are *not* stable. You should not store modification
ids between queries, nor hard-code modification ids into queries. Always
join with the `modifications` table.

Two modifications are considered distinct if their name, emoji, *or*
description are different. There may be many entries in this table with the
same name, but their emoji and/or description will be different.
"""

[[table.column]]
name = "id"
type = "bigint"
description = """
An arbitrary numeric ID. These IDs are *not* stable. You should not store
modification ids between queries, nor hard-code modification ids into queries.
Always join with the `modifications` table.
"""

[[table.column]]
name = "name"
type = "text"
description = """
The modification's name. This is not guaranteed to be code-friendly.
"""

[[table.column]]
name = "emoji"
type = "text"
description = """
The modification's emoji.
"""

[[table.column]]
name = "description"
type = "text"
description = """
The modification's description as seen in the tooltip.
"""

[[table]]
name = "player_versions"
description = """
Historical and current player information.

This table contains basic information about a player, like their name and
birthday. It has many child tables with more advanced information like their
augment and recompose history, their clubhouse reports, and their equipment.
Most of these tables use `valid_from` and `valid_until` to track which version
of the player data was active at any point in time.

For any of these tables, `valid_from` is the date (always UTC) when this
version of the player was first observed, and `valid_until` is the date when
a different version of the player was first observed, or `null` if this is
still the active version. The range of times when the player version was valid
is therefore `valid_from` inclusive to `valid_until` exclusive. The
(non-`null`) `valid_until` of one version should exactly match the `valid_from`
of the next version.

Remember that these are the dates of *observations* of the versions. In reality
the data changed sometime between the last observation of the previous version
(which is not currently exposed by chron) and the first observation of the new
version. In fact, caching and network delay may mean that the change actually
occurred on the "wrong" side of the `valid_from`/`valid_until` date. This
should hopefully be rare.

To select only active versions, add `where valid_until is null` to your query.
To select the version that was active at a given time `t`, add
`where valid_from <= t and (valid_until > t or valid_until is null)` to
your query. Remember to group that in parentheses if you're adding it to other
`where` clauses that are combined using `or`.

Much of the player information is in child tables:
- `data.player_modification_versions` has the player modifications.
- `data.player_equipment_versions` has the equipment equipped by each player.
- `data.player_equipment_effect_versions` has the attribute effects on each
  piece of equipment.
- `data.player_attribute_augments` has the record of all augments to attributes
  each player has recieved.
- `data.player_paradigm_shifts` has the record of all paradigm shifts that have
  affected this player.
- `data.player_recompositions` has the record of all times this player has been
  recomposed. See the documentation for the `mmolb_player_id` column for more
  on using this table.
- `data.player_report_versions` and `data.player_report_attribute_versions`
  have the contents of clubhouse reports for each player.
"""

[[table.column]]
name = "id"
type = "bigint"
description = """
An arbitrary numeric ID. These IDs are *not* stable. You should not store these
ids between queries, nor hard-code them into queries. To identify a player use
their `mmolb_player_id`.
"""

[[table.column]]
name = "mmolb_player_id"
type = "text"
description = """
The MMOLB id for this player. This is the preferred way to identify a player.

Keep in mind that recomposing players does *not* change their MMOLB id. If you
want to separate recomposed players (and you generally should), there are two
ways to do it. One is to group by name as well as id (it must be both, because
there are many examples of players with the same name), and assume every name
change is a recomposition. That's not strictly true, there have been players
whose name was changed without a recomposition, but not many.

The other option is to use `data.player_recompositions` to track the generation
of the player id, i.e. how many times it's been recomposed. Then each
`(mmolb_player_id, generation)` represents a unique player. Unfortunately,
there are (as yet unexplained) instances where the straightforward association
between recompositions and their player version chooses the wrong player.

If you want to do it that way, you can use a query like this one:

```
select
	*,
	(select count(1)
	 from data.player_recompositions pr
	 where pr.mmolb_player_id=pv.mmolb_player_id
	 	and pr.time < pv.valid_from
	 ) as generation
from data.player_versions pv
limit 10 -- limit while debugging
```
"""

[[table.column]]
name = "valid_from"
type = "timestamp without time zone"
description = """
The earliest time this version of the player was observed.

See the `data.player_versions` table description for how to use `valid_from`
and `valid_until`.
"""

[[table.column]]
name = "valid_until"
type = "timestamp without time zone"
description = """
The earliest time a different version of the player was observed, i.e. the
earliest time we know this version is no longer valid. The latest time we know
this version *is* valid is not exposed because nobody's requested it yet. If
you have a use for it, contact us in the MMOLB discord or on Github.

See the `data.player_versions` table description for how to use `valid_from`
and `valid_until`.
"""
nullable_explanation = """
`null` if this version is still valid.
"""

[[table.column]]
name = "duplicates"
type = "integer"
description = """
Currently being used to debug MMOLDB itself. This field may be deleted soon.
"""

[[table.column]]
name = "first_name"
type = "text"
description = """
The player's first name.

Players names are usually found in full when they appear in other tables. You
can assemble the player's full name with the expression 
`first_name || ' ' || last_name`.
"""

[[table.column]]
name = "last_name"
type = "text"
description = """
The player's last name.

Players names are usually found in full when they appear in other tables. You
can assemble the player's full name with the expression 
`first_name || ' ' || last_name`.
"""

[[table.column]]
name = "batting_handedness"
type = "bigint"
description = """
Hand this player uses to bat. References `taxa.handedness`.
"""
nullable_explanation = """
`null` if this player's batting handedness was not recognized. This represents
an ingest error.
"""

[[table.column]]
name = "pitching_handedness"
type = "bigint"
description = """
Hand this player uses to pitch. References `taxa.handedness`.
"""
nullable_explanation = """
`null` if this player's pitching handedness was not recognized. This represents
an ingest error.
"""

[[table.column]]
name = "home"
type = "text"
description = """
The player's birthplace. This is the location of the team they were born on at
the time they were born.
"""

[[table.column]]
name = "birthseason"
type = "integer"
description = """
The season during which the player was born.
"""

[[table.column]]
name = "birthday_type"
type = "bigint"
description = """
The type of the day during which the player was born. References
`taxa.day_type`. See the documentation on `taxa.day_type` for details.
"""
nullable_explanation = """
`null` if this player's birthday type was not recognized. This represents
an ingest error.
"""

[[table.column]]
name = "birthday_day"
type = "integer"
description = """
The regular day during which the player was born. This should be set if and
only if `birthday_type` is `Day`.
"""
nullable_explanation = """
`null` if this player wasn't born on a regular day.
"""

[[table.column]]
name = "birthday_superstar_day"
type = "integer"
description = """
The superstar day during which the player was born. This should be set if and
only if `birthday_type` is `SuperstarDay`.
"""
nullable_explanation = """
`null` if this player wasn't born on a superstar day.
"""

[[table.column]]
name = "likes"
type = "text"
description = """
The thing this player likes.
"""

[[table.column]]
name = "dislikes"
type = "text"
description = """
The thing this player dislikes.
"""

[[table.column]]
name = "number"
type = "integer"
description = """
This player's number (presumably a jersey number). As far as we know this has
no mechanical effect.
"""

[[table.column]]
name = "mmolb_team_id"
type = "text"
description = """
The MMOLB id for the team this player belongs to.

Teams are planned for addition to MMOLDB, and at that time you'll be able to
use this to connect a player to their team.
"""
nullable_explanation = """
`null` if this player is not currently on a team. Players can become teamless
for many reasons, including a player Retiring after losing all their
durability, being Released (full-team Release, different to Recompose) in the
Hall of Unmaking, and Relegation (a season 0 mechanic which is no longer
available).
"""

[[table.column]]
name = "slot"
type = "bigint"
description = """
The player's roster slot. References `taxa.slot`.

This can be used along with the player's name to more accurately connect 
players to game events.
"""
nullable_explanation = """
`null` if this player's slot was not recognized. This represents an ingest
error.
"""

[[table.column]]
name = "durability"
type = "double precision"
description = """
The player's durability. Displayed as a green progress bar on the player page.

This is a number that starts at 1 and is reduced by 0.05 at the end of every 
season, as well as when the player is damaged by a falling star. When it
reaches 0, the player Retires. 
"""

[[table.column]]
name = "greater_boon"
type = "bigint"
description = """
The player's Greater Boon, if they have one. This references 
`data.modifications`.

Modification ids (including boons) are *not* stable. You should not store 
these ids between queries, nor hard-code them into queries. Always join to 
`data.modifications` and use the modification name (and emoji and description 
if you like) instead.
"""
nullable_explanation = """
`null` if this player does not have a Greater Boon.
"""

[[table.column]]
name = "lesser_boon"
type = "bigint"
description = """
The player's Lesser Boon, if they have one. This references 
`data.modifications`.

Modification ids (including boons) are *not* stable. You should not store 
these ids between queries, nor hard-code them into queries. Always join to 
`data.modifications` and use the modification name (and emoji and description 
if you like) instead.
"""
nullable_explanation = """
`null` if this player does not have a Lesser Boon.
"""

[[table.column]]
name = "num_modifications"
type = "integer"
description = """
The number of modifications the player has.

This is used internally by MMOLDB itself, and is not likely to be useful to
users. To see player modifications, use the
`data.player_modification_versions` table.
"""

[[table.column]]
name = "occupied_equipment_slots"
type = "ARRAY" # TODO Add support for specific array types
description = """
A list of which equipment slots are occupied on this player.

This is used internally by MMOLDB itself, and is not likely to be useful to
users. To see player equipment, use the `data.player_equipment_versions` table.
"""

[[table.column]]
name = "included_report_categories"
type = "ARRAY" # TODO Add support for specific array types
description = """
A list of which clubhouse reports are included on this player.

This is used internally by MMOLDB itself, and is not likely to be useful to
users. To see player reports, use the `data.player_report_versions` table.
"""

[[table]]
name = "player_modification_versions"
description = """
Records instances of modifications on players. This connects
`data.player_versions` to `data.modifications`.

See the documentation of `data.player_versions` for a description of how to use
`valid_from` and `valid_until`.

Note that versions of this table do not need to coincide with versions of
`data.player_versions`. There can be a break in versions in this table without
a corresponding break in versions in `data.player_versions` and vice versa.
"""
nullable_explanation = """
`null` if this version is still valid.
"""

[[table.column]]
name = "id"
type = "bigint"
description = """
An arbitrary numeric ID. These IDs are *not* stable. You should not store these
ids between queries, nor hard-code them into queries. To identify a particular
modification on a particular player use the combination of its
`mmolb_player_id` and `modification_index`.
"""

[[table.column]]
name = "mmolb_player_id"
type = "text"
description = """
The MMOLB id for the player this modification belongs to. Use this to join on
`data.player_versions` (using `valid_from` and `valid_until` accordingly) to
associate players with their modifications.
"""

[[table.column]]
name = "modification_index"
type = "integer"
description = """
The index of this modification in the player's modifications list. A
`(mmolb_player_id, modification_index)` pair uniquely and stably identifies a
modification on a player.
"""

[[table.column]]
name = "valid_from"
type = "timestamp without time zone"
description = """
The earliest time this version of the player modification was observed.

See the `data.player_versions` table description for how to use `valid_from`
and `valid_until`.
"""

[[table.column]]
name = "valid_until"
type = "timestamp without time zone"
description = """
The earliest time a different version of the player modification was observed,
i.e. the earliest time we know this version is no longer valid. The latest time
we know this version *is* valid is not exposed because nobody's requested it
yet. If you have a use for it, contact us in the MMOLB discord or on Github.

See the `data.player_versions` table description for how to use `valid_from`
and `valid_until`.
"""
nullable_explanation = """
`null` if this version is still valid.
"""

[[table.column]]
name = "duplicates"
type = "integer"
description = """
Currently being used to debug MMOLDB itself. This field may be deleted soon.
"""

[[table.column]]
name = "modification_id"
type = "bigint"
description = """
Which modification this is. References the `data.modifications` table.

Modification ids are *not* stable. You should not store these ids between
queries, nor hard-code them into queries. Always join to `data.modifications`
and use the modification name (and emoji and description if you like) instead.
"""

[[table]]
name = "player_equipment_versions"
description = """
Records player equipment.

Though pieces of equipment are distinct objects that can theoretically be
tracked as they're moved around, MMOLB doesn't provide a stable identifer for
them. Because of this, we use the player and slot the item is equipped into
as its identifier, and an equipment being moved from one player to another is
treated as if the old item ceased to exist and the new item came into being.
Same for if an existing item is modified using orbs.

See the documentation of `data.player_versions` for a description of how to use
`valid_from` and `valid_until`.

Note that versions of this table do not need to coincide with versions of
`data.player_versions`. There can be a break in versions in this table without
a corresponding break in versions in `data.player_versions` and vice versa.
"""

[[table.column]]
name = "id"
type = "bigint"
description = """
An arbitrary numeric ID. These IDs are *not* stable. You should not store these
ids between queries, nor hard-code them into queries. To identify a particular
piece of equipment on a particular player use the combination of its
`mmolb_player_id` and `equipment_slot`.
"""

[[table.column]]
name = "mmolb_player_id"
type = "text"
description = """
The MMOLB id for the player this equipment is equipped to. Use this to join on
`data.player_versions` (using `valid_from` and `valid_until` accordingly) to
associate players with their equipment.
"""

[[table.column]]
name = "equipment_slot"
type = "text"
description = """
The equipment slot that this piece of equipment is equipped to. Current values
are:
- Accessory
- Body
- Feet
- Hands
- Head

This may be replaced with a `taxa`.

A `(mmolb_player_id, equipment_slot)` pair uniquely and stably identifies a
piece of equipment.
"""

[[table.column]]
name = "valid_from"
type = "timestamp without time zone"
description = """
The earliest time this version of the player equipment was observed.

See the `data.player_versions` table description for how to use `valid_from`
and `valid_until`.
"""

[[table.column]]
name = "valid_until"
type = "timestamp without time zone"
description = """
The earliest time a different version of the player equipment was observed,
i.e. the earliest time we know this version is no longer valid. The latest time
we know this version *is* valid is not exposed because nobody's requested it
yet. If you have a use for it, contact us in the MMOLB discord or on Github.

See the `data.player_versions` table description for how to use `valid_from`
and `valid_until`.
"""
nullable_explanation = """
`null` if this version is still valid.
"""

[[table.column]]
name = "duplicates"
type = "integer"
description = """
Currently being used to debug MMOLDB itself. This field may be deleted soon.
"""

[[table.column]]
name = "emoji"
type = "text"
description = """
The equipment's emoji.
"""

[[table.column]]
name = "name"
type = "text"
description = """
The equipment's normal name.

If the equipment has a `rare_name`, this name is not used. Otherwise, this name
is combined with the item's prefixes and suffixes to create its displayed name.

As of the end of season 4, there is only one `name` for each equipment slot:
- Accessory: Ring
- Body: T-Shirt
- Feet: Sneakers
- Hands: Gloves
- Head: Cap
"""

[[table.column]]
name = "special_type"
type = "text"
description = """
This field exists in the API but we've never seen a value from it.
"""
nullable_explanation = """
`null` for every known piece of equipment.
"""

[[table.column]]
name = "description"
type = "text"
description = """
This field exists in the API but we've never seen a value from it.
"""
nullable_explanation = """
`null` for every known piece of equipment.
"""

[[table.column]]
name = "rare_name"
type = "text"
description = """
Rare and higher magic items gain a new name that overrides the
prefix-and-suffix-based default name. This is that name.

Items keep their rare name even if they are downgraded past rare with a
Disintegrating Orb.
"""
nullable_explanation = """
`null` if this item is not, and has never been, Rare or higher.
"""

[[table.column]]
name = "cost"
type = "integer"
description = """
Presumably, the amount the equipment cost to buy from Mother Quaelyth.
"""
nullable_explanation = """
`null` if the cost was not an integer. This represents an ingest error.
"""

[[table.column]]
name = "prefixes"
type = "ARRAY" # TODO Add support for specific array types
description = """
A list of up to two prefixes the item has. These are prepended to `name` to
create the item's display name, unless overridden by `rare_name`.
"""

[[table.column]]
name = "suffixes"
type = "ARRAY" # TODO Add support for specific array types
description = """
A list of up to two suffixes the item has. These are appended to `name` to
create the item's display name, unless overridden by `rare_name`.
"""

[[table.column]]
name = "rarity"
type = "text"
description = """
The item's rarity. "Normal", "Magic", or "Rare".
"""
nullable_explanation = """
`null` if the item's rarity is not a string. This represents a player ingest error.
"""

[[table.column]]
name = "num_effects"
type = "integer"
description = """
The number of effects this piece of equipment has.

This is used internally by MMOLDB itself, and is not likely to be useful to
users. To see equipment effects, use the
`data.player_equipment_effect_versions` table.
"""

[[table]]
name = "player_equipment_effect_versions"
description = """
Records player equipment effects.

See the documentation of `data.player_equipment_versions` for a description of
how MMOLDB handles equipment.

See the documentation of `data.player_versions` for a description of how to use
`valid_from` and `valid_until`.

Note that versions of this table do not need to coincide with versions of
`data.player_versions`, nor versions of `data.player_equipment_versions`.
There can be a break in versions in this table without a corresponding break in
versions in either of those tables and vice versa.
"""

[[table.column]]
name = "id"
type = "bigint"
description = """
An arbitrary numeric ID. These IDs are *not* stable. You should not store these
ids between queries, nor hard-code them into queries. To identify a particular
effect on a particular piece of equipment on a particular player use the
combination of its `mmolb_player_id`, `equipment_slot`, and `effect_index`.
"""

[[table.column]]
name = "mmolb_player_id"
type = "text"
description = """
The MMOLB id for the player this equipment is equipped to. Use this to join on
`data.player_versions` (using `valid_from` and `valid_until` accordingly) to
associate players with their equipment.
"""

[[table.column]]
name = "equipment_slot"
type = "text"
description = """
The equipment slot that this piece of equipment is equipped to. See
`equipment_slot` on `data.player_equipment_versions` for more.
"""

[[table.column]]
name = "effect_index"
type = "integer"
description = """
The index of this effect within this piece of equipment's list of effects. A
`(mmolb_player_id, equipment_slot, effect_index)` triple uniquely and stably
identifies an equipment effect.
"""

[[table.column]]
name = "valid_from"
type = "timestamp without time zone"
description = """
The earliest time this version of the player equipment effect was observed.

See the `data.player_versions` table description for how to use `valid_from`
and `valid_until`.
"""

[[table.column]]
name = "valid_until"
type = "timestamp without time zone"
description = """
The earliest time a different version of the player equipment effect was
observed, i.e. the earliest time we know this version is no longer valid. The
latest time we know this version *is* valid is not exposed because nobody's
requested it yet. If you have a use for it, contact us in the MMOLB discord or
on Github.

See the `data.player_versions` table description for how to use `valid_from`
and `valid_until`.
"""
nullable_explanation = """
`null` if this version is still valid.
"""

[[table.column]]
name = "duplicates"
type = "integer"
description = """
Currently being used to debug MMOLDB itself. This field may be deleted soon.
"""

[[table.column]]
name = "attribute"
type = "bigint"
description = """
The attribute this effect modifies. References `taxa.attribute`.
"""

[[table.column]]
name = "effect_type"
type = "bigint"
description = """
The type of effect. References `taxa.attribute_effect_type`.

As of the end of season 4, the only effect type that's ever appeared is Flat.
"""

[[table.column]]
name = "value"
type = "double precision"
description = """
The value of the effect. This is stored exactly as stored in the MMOLB
API (*not* the UI). This means that attribute values range from 0.05 to 0.20.

Note that this is a different scale from attribute augment values.
"""

[[table]]
name = "player_feed_versions"
description = """
Records when new items appear in the player feed.

This is mainly used by MMOLDB itself. It's not likely to be useful outside of
that.

See the documentation of `data.player_versions` for a description of how to use
`valid_from` and `valid_until`.

Note that versions of this table do not need to coincide with versions of
`data.player_versions`. There can be a break in versions in this table without
a corresponding break in versions in `data.player_versions` and vice versa.
"""

[[table.column]]
name = "id"
type = "bigint"
description = """
An arbitrary numeric ID. These IDs are *not* stable. You should not store these
ids between queries, nor hard-code them into queries. To identify a particular
player feed use its `mmolb_player_id`.
"""

[[table.column]]
name = "mmolb_player_id"
type = "text"
description = """
The MMOLB id for the player this feed belongs to. Use this to join on
`data.player_versions` (using `valid_from` and `valid_until` accordingly) to
associate players with their feeds.
"""

[[table.column]]
name = "valid_from"
type = "timestamp without time zone"
description = """
The earliest time this version of the player feed was observed.

See the `data.player_versions` table description for how to use `valid_from`
and `valid_until`.
"""

[[table.column]]
name = "valid_until"
type = "timestamp without time zone"
description = """
The earliest time a different version of the player feed was observed, i.e. the
earliest time we know this version is no longer valid. The latest time we know
this version *is* valid is not exposed because nobody's requested it yet. If
you have a use for it, contact us in the MMOLB discord or on Github.

See the `data.player_versions` table description for how to use `valid_from`
and `valid_until`.
"""
nullable_explanation = """
`null` if this version is still valid.
"""

[[table.column]]
name = "duplicates"
type = "integer"
description = """
Currently being used to debug MMOLDB itself. This field may be deleted soon.
"""

[[table.column]]
name = "num_entries"
type = "integer"
description = """
The number of entries in this feed.

This is used internally by MMOLDB itself, and is not likely to be useful to
users. To see the information from the feed, use the tables:
- `data.player_attribute_augments` for the record of all augments to attributes
  each player has recieved.
- `data.player_paradigm_shifts` for the record of all paradigm shifts that have
  affected this player.
- `data.player_recompositions` for the record of all times this player has been
  recomposed.
"""

[[table]]
name = "player_attribute_augments"
description = """
Records the changes to player attributes as the result of augments.
"""

[[table.column]]
name = "id"
type = "bigint"
description = """
An arbitrary numeric ID. These IDs are *not* stable. You should not store these
ids between queries, nor hard-code them into queries. To identify a particular
augment use the combination of its `mmolb_player_id` and `feed_event_index`.
"""

[[table.column]]
name = "mmolb_player_id"
type = "text"
description = """
The MMOLB id for the player this that was augmented. Use this to join on
`data.player_versions` (using `valid_from` and `valid_until` accordingly) to
associate players with their augments.
"""

[[table.column]]
name = "feed_event_index"
type = "integer"
description = """
The index of this augment in the player's feed. A
`(mmolb_player_id, feed_event_index)` pair uniquely and stably
identifies an applied augment.
"""

[[table.column]]
name = "time"
type = "timestamp without time zone"
description = """
The exact time this augment was applied.

This time is given to us by the MMOLB API, rather than being the time of an API
call, and so should be trustworthy.
"""

[[table.column]]
name = "season"
type = "integer"
description = """
The season during which the augment was applied.
"""

[[table.column]]
name = "day_type"
type = "bigint"
description = """
The type of the day during which the augment was applied. References
`taxa.day_type`. See the documentation on `taxa.day_type` for details.
"""
nullable_explanation = """
`null` if this augment's day was not recognized. This represents an ingest
error.
"""

[[table.column]]
name = "day"
type = "integer"
description = """
The regular day during which the augment was applied. This should be set if and
only if `day_type` is `Day`.
"""
nullable_explanation = """
`null` if this augment wasn't applied on a regular day.
"""

[[table.column]]
name = "superstar_day"
type = "integer"
description = """
The superstar day during which the augment was applied This should be set if
and only if `day_type` is `SuperstarDay`.
"""
nullable_explanation = """
`null` if this augment wasn't applied on a superstar day.
"""

[[table.column]]
name = "attribute"
type = "bigint"
description = """
The attribute this augment modifies. References `taxa.attribute`.
"""

[[table.column]]
name = "value"
type = "integer"
description = """
The value by which the attribute was increased. This is stored exactly as
displayed in the MMOLB UI. Common values are 5, 6, 15, 30, and 50.
"""

[[table]]
name = "player_paradigm_shifts"
description = """
Records every instance of each player being involved in a paradigm shift.

Each paradigm shift that fires will create 9 entries in this table. MMOLDB
doesn't (yet) connect the paradigm shifts to a team.
"""

[[table.column]]
name = "id"
type = "bigint"
description = """
An arbitrary numeric ID. These IDs are *not* stable. You should not store these
ids between queries, nor hard-code them into queries. To identify a particular
paradigm shift use the combination of its `mmolb_player_id` and
`feed_event_index`.
"""

[[table.column]]
name = "mmolb_player_id"
type = "text"
description = """
The MMOLB id for the player whose priority was changed. Use this to join on
`data.player_versions` (using `valid_from` and `valid_until` accordingly) to
associate players with their paradigm shifts.
"""

[[table.column]]
name = "feed_event_index"
type = "integer"
description = """
The index of this paradigm shift in the player's feed. A
`(mmolb_player_id, feed_event_index)` pair uniquely and stably
identifies an applied paradigm shift on a particular player.
"""

[[table.column]]
name = "time"
type = "timestamp without time zone"
description = """
The exact time this paradigm shift was applied.

This time is given to us by the MMOLB API, rather than being the time of an API
call, and so should be trustworthy.
"""

[[table.column]]
name = "season"
type = "integer"
description = """
The season during which the paradigm shift was applied.
"""

[[table.column]]
name = "day_type"
type = "bigint"
description = """
The type of the day during which the paradigm shift was applied. References
`taxa.day_type`. See the documentation on `taxa.day_type` for details.
"""
nullable_explanation = """
`null` if this paradigm shift's day was not recognized. This represents an
ingest error.
"""

[[table.column]]
name = "day"
type = "integer"
description = """
The regular day during which the paradigm shift was applied. This should be set
if and only if `day_type` is `Day`.
"""
nullable_explanation = """
`null` if this paradigm shift wasn't applied on a regular day.
"""

[[table.column]]
name = "superstar_day"
type = "integer"
description = """
The superstar day during which the paradigm shift was applied This should be
set if and only if `day_type` is `SuperstarDay`.
"""
nullable_explanation = """
`null` if this paradigm shift wasn't applied on a superstar day.
"""

[[table.column]]
name = "attribute"
type = "bigint"
description = """
The attribute this paradigm shift sorts the lineup by. References `taxa.attribute`.
"""

[[table]]
name = "player_recompositions"
description = """
Records every instance of a player being recomposed.

This table is more complicated because there have been 3 distinct recompose
bugs that have been handled by deleting and/or inserting inferred
recompositions which aren't present in the feed. Inferred recompositions have
the `feed_event_index` of the first feed event to happen *after* them, but also
have an `inferred_event_index`.

The 3 bugs have been:
1. Some recompositions were reverted entirely, and their events were removed
   from  the player feed. These have been handled by suppressing the
   recompositions entirely, so they don't appear in this table. After more
   investigation the handling may  or may not change to insert two inferred
   recompositions in quick succession, with the latter reverting the former.
2. Some recompositions occurred without a feed event. These have been handled
   by adding an inferred recomposition. The time for these inferred
   recompositions is set to the first time we observed the recomposed player,
   and the season and day derived from that time.
3. Some recompositions had their feed event and attributes reverted, but not
   their name change. These have been handled by suppressing the real
   recompositions (for the short time they appeared) and inserting an inferred
   recomposition to replace it (making it permanent), plus an additional
   recomposition when the overwrite happens. This latter recomposition doesn't
   change the player name, but does change their attributes. It's also marked
   as reverting the prior recomposition.

   Because of this bug, it is not entirely true to assume that player
   attributes after a recomposition are within the newly-generated-player
   boundaries. You can check for non-`null` `reverts_recomposition` to see if
   the "recomposed" player's attributes weren't freshly generated and may have
   been subject to augments.
"""

[[table.column]]
name = "id"
type = "bigint"
description = """
An arbitrary numeric ID. These IDs are *not* stable. You should not store these
ids between queries, nor hard-code them into queries. To identify a particular
recomposition use the combination of its `mmolb_player_id`,
`inferred_event_index`, and `feed_event_index`.
"""

[[table.column]]
name = "mmolb_player_id"
type = "text"
description = """
The MMOLB id for the player who was recomposed. Use this to join on
`data.player_versions` (using `valid_from` and `valid_until` accordingly) to
associate players with their recompositions.
"""

[[table.column]]
name = "inferred_event_index"
type = "integer"
description = """
For an inferred recomposition, the index of this recomposition amongst only the
other inferred recompositions with the same `feed_event_index`.
"""
nullable_explanation = """
`null` if this is not an inferred recompsition.
"""

[[table.column]]
name = "feed_event_index"
type = "integer"
description = """
The index of this recomposition in the player's feed, for non-inferred
recompositions. For inferred recompsitions this is the index of the next event
in the player's feed. See the table description for more details.

A `(mmolb_player_id, inferred_event_index, feed_event_index)` triple uniquely and
stably identifies an applied recomposition on a particular player.
"""

[[table.column]]
name = "time"
type = "timestamp without time zone"
description = """
The exact time this recomposition was applied, for non-inferred recompositions.
For inferred recompositions this time may not be exact.

This time is given to us by the MMOLB API, rather than being the time of an API
call, and so should be trustworthy (except in the case of inferred
recompositions).
"""

[[table.column]]
name = "season"
type = "integer"
description = """
The season during which the recomposition was applied.
"""

[[table.column]]
name = "day_type"
type = "bigint"
description = """
The type of the day during which the recomposition was applied. References
`taxa.day_type`. See the documentation on `taxa.day_type` for details.
"""
nullable_explanation = """
`null` if this recomposition's day was not recognized. This represents an
ingest error.
"""

[[table.column]]
name = "day"
type = "integer"
description = """
The regular day during which the recomposition was applied. This should be set
if and only if `day_type` is `Day`.
"""
nullable_explanation = """
`null` if this recomposition wasn't applied on a regular day.
"""

[[table.column]]
name = "superstar_day"
type = "integer"
description = """
The superstar day during which the recomposition was applied This should be
set if and only if `day_type` is `SuperstarDay`.
"""
nullable_explanation = """
`null` if this recomposition wasn't applied on a superstar day.
"""

[[table.column]]
name = "player_name_before"
type = "text"
description = """
The player's full name before the recomposition.
"""

[[table.column]]
name = "player_name_after"
type = "text"
description = """
The player's full name after the recomposition.
"""

[[table.column]]
name = "reverts_recomposition"
type = "timestamp without time zone"
description = """
If this recomposition reverts another recomposition, the `time` of the
recomposition it reverts. This means that after this recomposition, the
player's attributes are set equal to what they were before the recomposition
that this recomposition reverts. See the table description for more details.
"""
nullable_explanation = """
`null` if this recomposition does not revert another recomposition.
"""

[[table]]
name = "player_report_versions"
description = """
The contents of player clubhouse reports, also called "talk"s.

Attributes are recorded in `data.player_report_attribute_versions`. For many
common uses of reports you can skip this table entirely and go straight to that
one.

Before the Season 4 superstar break, reports displayed the player's attributes
as of the creation of the report. After the Season 4 superstar break, reports
display the player's current attributes (for our purposes, this means the
attributes as of `valid_from` and until sometime before `valid_until`). The
season and day of a report does *not* update live, even after the Season 4
change. For post-s4-ss reports, the season and day is not particularly useful.

See the documentation of `data.player_versions` for a description of how to use
`valid_from` and `valid_until`.

Note that versions of this table do not need to coincide with versions of
`data.player_versions`. There can be a break in versions in this table without
a corresponding break in versions in `data.player_versions` and vice versa.
"""

[[table.column]]
name = "id"
type = "bigint"
description = """
An arbitrary numeric ID. These IDs are *not* stable. You should not store these
ids between queries, nor hard-code them into queries. To identify a particular
report use the combination of its `mmolb_player_id` and `category`.
"""

[[table.column]]
name = "mmolb_player_id"
type = "text"
description = """
The MMOLB id for the player who this report is about. Use this to join on
`data.player_versions` (using `valid_from` and `valid_until` accordingly) to
associate players with their reports.
"""

[[table.column]]
name = "category"
type = "bigint"
description = """
The category this report is for ("Batting", "Baserunning", etc.). References
`taxa.attribute_category`.
"""

[[table.column]]
name = "valid_from"
type = "timestamp without time zone"
description = """
The earliest time this version of the report was observed.

See the `data.player_versions` table description for how to use `valid_from`
and `valid_until`.
"""

[[table.column]]
name = "valid_until"
type = "timestamp without time zone"
description = """
The earliest time a different version of the report was observed, i.e. the
earliest time we know this version is no longer valid. The latest time we know
this version *is* valid is not exposed because nobody's requested it yet. If
you have a use for it, contact us in the MMOLB discord or on Github.

See the `data.player_versions` table description for how to use `valid_from`
and `valid_until`.
"""
nullable_explanation = """
`null` if this version is still valid.
"""

[[table.column]]
name = "season"
type = "integer"
description = """
The season during which the report was created.

This value only changes when a new report is generated (including the reports
from Recomposing the player). Do not assume that the value of an attribute
corresponds with the season that its report was generated.
"""
nullable_explanation = """
`null` for reports that were generated before their season and day were
recorded.
"""

[[table.column]]
name = "day_type"
type = "bigint"
description = """
The type of the day during which the report was created. References
`taxa.day_type`. See the documentation on `taxa.day_type` for details.

This value only changes when a new report is generated (including the reports
from Recomposing the player). Do not assume that the value of an attribute
corresponds with the day_type that its report was generated.
"""
nullable_explanation = """
`null` for reports that were generated before their season and day were
recorded.
"""

[[table.column]]
name = "day"
type = "integer"
description = """
The regular day during which the report was created. This should be set if and
only if `day_type` is `Day`.

This value only changes when a new report is generated (including the reports
from Recomposing the player). Do not assume that the value of an attribute
corresponds with the day that its report was generated.
"""
nullable_explanation = """
`null` if this report wasn't created on a regular day, or if this report was
generated before reports' season and day were recorded.
"""

[[table.column]]
name = "superstar_day"
type = "integer"
description = """
The superstar day during which the report was created. This should be
set if and only if `day_type` is `SuperstarDay`.

This value only changes when a new report is generated (including the reports
from Recomposing the player). Do not assume that the value of an attribute
corresponds with the superstar day that its report was generated.
"""
nullable_explanation = """
`null` if this report wasn't created on a superstar day, or if this report was
generated before reports' season and day were recorded.
"""

[[table.column]]
name = "quote"
type = "text"
description = """
The quote from this player report.
"""

[[table.column]]
name = "included_attributes"
type = "ARRAY" # TODO Add support for specific array types
description = """
A list of which attributes are included in this report.

This is used internally by MMOLDB itself, and is not likely to be useful to
users. To see attribute values, use the `data.player_report_attribute_versions`
table.
"""

[[table]]
name = "player_report_attribute_versions"
description = """
The values of attributes in player clubhouse reports.

This is a child table of `data.player_report_versions`, but for many common
uses of attributes you don't need to reference the intermediate table.

Before the Season 4 superstar break, reports displayed the player's attributes
as of the creation of the report. After the Season 4 superstar break, reports
display the player's current attributes (for our purposes, this means the
attributes as of `valid_from` and until sometime before `valid_until`). The
season and day of a report does *not* update live, even after the Season 4
change. For post-s4-ss reports, the season and day is not particularly useful.

See the documentation of `data.player_versions` for a description of how to use
`valid_from` and `valid_until`.

Note that versions of this table do not need to coincide with versions of
`data.player_versions`, nor versions of `data.player_report_versions`. There
can be a break in versions in this table without a corresponding break in
versions in either of those tables and vice versa.
"""

[[table.column]]
name = "id"
type = "bigint"
description = """
An arbitrary numeric ID. These IDs are *not* stable. You should not store these
ids between queries, nor hard-code them into queries. To identify a particular
report attribute use the combination of its `mmolb_player_id` and `attribute`
(optionally also `category`).
"""

[[table.column]]
name = "mmolb_player_id"
type = "text"
description = """
The MMOLB id for the player who this report attribute belongs to. Use this to
join on `data.player_versions` (using `valid_from` and `valid_until`
accordingly) to associate players with their attributes.
"""

[[table.column]]
name = "category"
type = "bigint"
description = """
The category this report is for ("Batting", "Baserunning", etc.). References
`taxa.attribute_category`.
"""

[[table.column]]
name = "attribute"
type = "bigint"
description = """
Which attribute this is. References `taxa.attribute`.
"""

[[table.column]]
name = "valid_from"
type = "timestamp without time zone"
description = """
The earliest time this version of the attribute  was observed.

See the `data.player_versions` table description for how to use `valid_from`
and `valid_until`.
"""

[[table.column]]
name = "valid_until"
type = "timestamp without time zone"
description = """
The earliest time a different version of the report was observed, i.e. the
earliest time we know this version is no longer valid. The latest time we know
this version *is* valid is not exposed because nobody's requested it yet. If
you have a use for it, contact us in the MMOLB discord or on Github.

See the `data.player_versions` table description for how to use `valid_from`
and `valid_until`.
"""
nullable_explanation = """
`null` if this version is still valid.
"""

[[table.column]]
name = "stars"
type = "integer"
description = """
The number of stars the player has in this attribute.
"""
